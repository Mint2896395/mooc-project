import Head from "next/head";
import Pagination from "~/layouts/Pagination";
import { useRouter } from "next/router";
import { useFetch } from "usehooks-ts";
import CardNews from "~/components/CardNews";
import News from "~/types/News";

interface Response {
  total: number;
  skip: number;
  limit: number;
  newses: News[];
}

const CoursesPage = () => {
  //parse the page and perPage  from router.query
  const router = useRouter();
  const query = router.query;
  const page = (query.page as string) ?? "1";
  const perPage = (query.perPage as string) ?? "6";

  //Define limit and skip which is used by DummyJSON API for pagination
  const limit = perPage;
  const skip = (parseInt(page) - 1) * parseInt(limit);
  const url = `/api/news?limit=${limit}&skip=${skip}&select=source.name,author,description,content`;

  //use the useFetch hook to get the products
  const { data } = useFetch<Response>(url);

  return (
    <>
      <Head>
        <title>News</title>
        <meta name="description" content="Generated by create-mooc-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="">
        <center className="box-border  ">
          <div className="relative box-border h-[130px] md:h-64 ">
            <div className="relative left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 transform text-center ">
              <p className="my-0 box-border whitespace-nowrap text-2xl tracking-[3.2px] text-[#b39573] md:text-4xl">
                ข่าวสาร และบทความ
              </p>
            </div>
          </div>

          <hr className="box-content h-0 overflow-visible border-solid md:mt-6" />
        </center>
        <div className="bg-[#f5f5f5] md:pb-20">
          <div className="m-0 flex w-full flex-col items-center justify-center p-0 md:mx-auto md:w-[88%] md:px-[15px] ">
            {!data && <div>Loading...</div>}
            <div className="mx-auto box-border grid grid-cols-2 gap-3 px-2 md:grid-cols-3 md:gap-5 md:px-1 md:py-20 lg:grid-cols-3 ">
              {data?.newses?.map((news) => {
                return (
                  <>
                    <CardNews key={news.source.id} news={news} />
                  </>
                );
              })}
            </div>

            {/* // we use tailwindCSS classes to create a decent product grid */}
            <div className="container mx-auto my-10 flex flex-col items-center">
              <Pagination
                page={parseInt(page)}
                perPage={parseInt(perPage)}
                itemCount={data?.total ?? 0}
              />
              {!data && <div>Loading...</div>}
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default CoursesPage;
